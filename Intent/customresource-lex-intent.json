{
    "typeName": "CustomResource::Lex::Intent",
    "description": "Resource schema for CustomResource::Lex::Intent",
    "sourceUrl": "https://github.com/KMK-Git/aws-cloudformation-resource-providers-lex.git",
    "definitions": {
        "CodeHook": {
            "description": "Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.",
            "type": "object",
            "properties": {
                "MessageVersion": {
                    "description": "The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html).",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 5
                },
                "Uri": {
                    "description": "The Amazon Resource Name (ARN) of the Lambda function.",
                    "type": "string",
                    "minLength": 20,
                    "maxLength": 2048,
                    "pattern": "arn:aws[a-zA-Z-]*[a-zA-Z-]*:lambda:[a-z]+-[a-z]+(-[a-z]+)*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?"
                }
            },
            "additionalProperties": false,
            "required": [
                "MessageVersion",
                "Uri"
            ]
        },
        "FollowUpPrompt": {
            "description": "A prompt for additional activity after an intent is fulfilled. For example, after the OrderPizza intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.",
            "type": "object",
            "properties": {
                "Prompt": {
                    "description": "Prompts for information from the user.",
                    "$ref": "#/definitions/Prompt"
                },
                "RejectionStatement": {
                    "description": "If the user answers \"no\" to the question defined in the prompt field, Amazon Lex responds with this statement to acknowledge that the intent was canceled.",
                    "$ref": "#/definitions/Statement"
                }
            },
            "additionalProperties": false,
            "required": [
                "Prompt",
                "RejectionStatement"
            ]
        },
        "FulfillmentActivity": {
            "description": "Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application.\n\nConsider the following examples:\n+ In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria.\n+ In a gaming application, when a user says \"pick up a rock\", this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client.",
            "type": "object",
            "properties": {
                "CodeHook": {
                    "description": "A description of the Lambda function that is run to fulfill the intent.",
                    "$ref": "#/definitions/CodeHook"
                },
                "Type": {
                    "description": " How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application.",
                    "type": "string",
                    "enum": [
                        "ReturnIntent",
                        "CodeHook"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "Type"
            ]
        },
        "InputContext": {
            "description": "The name of a context that must be active for an intent to be selected by Amazon Lex.",
            "type": "object",
            "properties": {
                "Name": {
                    "description": "The name of the context.",
                    "type": "string",
                    "pattern": "^([A-Za-z]_?){1,101}$"
                }
            },
            "additionalProperties": false,
            "required": [
                "Name"
            ]
        },
        "KendraConfiguration": {
            "description": "Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see AMAZON.KendraSearchIntent.",
            "type": "object",
            "properties": {
                "KendraIndex": {
                    "description": "The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot. If the Amazon Kendra index does not exist, you get an exception when you call the PutIntent operation.",
                    "type": "string",
                    "minLength": 20,
                    "maxLength": 2048,
                    "pattern": "arn:aws[a-zA-Z-]*:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\/[a-zA-Z0-9][a-zA-Z0-9_-]*"
                },
                "QueryFilterString": {
                    "description": "A query filter that Amazon Lex sends to Amazon Kendra to filter the response from the query. The filter is in the format defined by Amazon Kendra. For more information, see Filtering queries. You can override this filter string with a new filter string at runtime.",
                    "type": "string",
                    "minLength": 0
                },
                "Role": {
                    "description": "The Amazon Resource Name (ARN) of an IAM role that has permission to search the Amazon Kendra index. The role must be in the same account and Region as the Amazon Lex bot. If the role does not exist, you get an exception when you call the PutIntent operation.",
                    "type": "string",
                    "minLength": 20,
                    "maxLength": 2048,
                    "pattern": "arn:aws[a-zA-Z-]*:iam::[0-9]{12}:role/.*"
                }
            },
            "additionalProperties": false,
            "required": [
                "KendraIndex",
                "Role"
            ]
        },
        "OutputContext": {
            "description": "The specification of an output context that is set when an intent is fulfilled.",
            "type": "object",
            "properties": {
                "Name": {
                    "description": "The name of the context.",
                    "type": "string",
                    "pattern": "^([A-Za-z]_?){1,101}$"
                },
                "TimeToLiveInSeconds": {
                    "description": "The number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).",
                    "type": "integer",
                    "minimum": 5,
                    "maximum": 86400
                },
                "TurnsToLive": {
                    "description": "The number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 20
                }
            },
            "additionalProperties": false,
            "required": [
                "Name",
                "TimeToLiveInSeconds",
                "TurnsToLive"
            ]
        },
        "Message": {
            "description": "The message object that provides the message text and its type.",
            "type": "object",
            "properties": {
                "Content": {
                    "description": "The text of the message.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1000
                },
                "ContentType": {
                    "description": "The content type of the message string.",
                    "type": "string",
                    "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                    ]
                },
                "GroupNumber": {
                    "description": "Identifies the message group that the message belongs to. When a group is assigned to a message, Amazon Lex returns one message from each group in the response.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                }
            },
            "additionalProperties": false,
            "required": [
                "Content",
                "ContentType"
            ]
        },
        "Prompt": {
            "description": "Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see [Amazon Lex: How It Works](https://docs.aws.amazon.com/lex/latest/dg/how-it-works.html).",
            "type": "object",
            "properties": {
                "MaxAttempts": {
                    "description": "The number of times to prompt the user for information.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                },
                "Messages": {
                    "description": "An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Message"
                    },
                    "minItems": 1,
                    "maxItems": 15
                },
                "ResponseCard": {
                    "description": "A response card. Amazon Lex uses this prompt at runtime, in the PostText API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see [Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50000
                }
            },
            "additionalProperties": false,
            "required": [
                "MaxAttempts",
                "Messages"
            ]
        },
        "Slot": {
            "description": "Identifies the version of a specific slot.",
            "type": "object",
            "properties": {
                "DefaultValueSpec": {
                    "description": "A list of default values for the slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.",
                    "$ref": "#/definitions/SlotDefaultValueSpec"
                },
                "Description": {
                    "description": "A description of the slot.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 200
                },
                "Name": {
                    "description": "The name of the slot.",
                    "type": "string",
                    "pattern": "^([A-Za-z]_?){1,101}$"
                },
                "ObfuscationSetting": {
                    "description": "Determines whether a slot is obfuscated in conversation logs and stored utterances. When you obfuscate a slot, the value is replaced by the slot name in curly braces ({}). For example, if the slot name is \"full_name\", obfuscated values are replaced with \"{full_name}\". For more information, see [Slot Obfuscation](https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html).",
                    "type": "string",
                    "enum": [
                        "NONE",
                        "DEFAULT_OBFUSCATION"
                    ]
                },
                "Priority": {
                    "description": "Directs Amazon Lex the order in which to elicit this slot value from the user. For example, if the intent has two slots with priorities 1 and 2, AWS Amazon Lex first elicits a value for the slot with priority 1. If multiple slots share the same priority, the order in which Amazon Lex elicits values is arbitrary.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100
                },
                "ResponseCard": {
                    "description": "A set of possible responses for the slot type used by text-based clients. A user chooses an option from the response card, instead of using text to reply. ",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50000
                },
                "SampleUtterances": {
                    "description": " If you know a specific pattern with which users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "minItems": 0,
                    "maxItems": 10
                },
                "SlotConstraint": {
                    "description": "Specifies whether the slot is required or optional.",
                    "type": "string",
                    "enum": [
                        "Required",
                        "Optional"
                    ]
                },
                "SlotType": {
                    "description": "The type of the slot, either a custom slot type that you defined or one of the built-in slot types.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+"
                },
                "SlotTypeVersion": {
                    "description": "The version of the slot type.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "pattern": "\\$LATEST|[0-9]+"
                },
                "ValueElicitationPrompt": {
                    "description": "The prompt that Amazon Lex uses to elicit the slot value from the user.",
                    "$ref": "#/definitions/Prompt"
                }
            },
            "additionalProperties": false,
            "required": [
                "Name",
                "SlotConstraint"
            ]
        },
        "SlotDefaultValue": {
            "description": "A default value for a slot.",
            "type": "object",
            "properties": {
                "DefaultValue": {
                    "description": "The default value for the slot. You can specify one of the following:\n+ #context-name.slot-name - The slot value \"slot-name\" in the context \"context-name.\"\n+ {attribute} - The slot value of the session attribute \"attribute.\"\n+ 'value' - The discrete value \"value.\"",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 202
                }
            },
            "additionalProperties": false,
            "required": [
                "DefaultValue"
            ]
        },
        "SlotDefaultValueSpec": {
            "description": "Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot.",
            "type": "object",
            "properties": {
                "DefaultValueList": {
                    "description": "The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value. The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SlotDefaultValue"
                    },
                    "minItems": 0,
                    "maxItems": 10
                }
            },
            "additionalProperties": false,
            "required": [
                "DefaultValueList"
            ]
        },
        "Statement": {
            "description": "A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey.",
            "type": "object",
            "properties": {
                "Messages": {
                    "description": "A collection of message objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Message"
                    },
                    "minItems": 1,
                    "maxItems": 15
                },
                "ResponseCard": {
                    "description": "At runtime, if the client is using the PostText API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50000
                }
            },
            "additionalProperties": false,
            "required": [
                "Messages"
            ]
        }
    },
    "properties": {
        "Checksum": {
            "description": "Checksum of the $LATEST version of the intent.",
            "type": "string"
        },
        "ConclusionStatement": {
            "description": "The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function. This element is relevant only if you provide a Lambda function in the FulfillmentActivity. If you return the intent to the client application, you can't specify this element. The FollowUpPrompt and ConclusionStatement are mutually exclusive. You can specify only one.",
            "$ref": "#/definitions/Statement"
        },
        "ConfirmationPrompt": {
            "description": "Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. You you must provide both the rejectionStatement and the confirmationPrompt, or neither.",
            "$ref": "#/definitions/Prompt"
        },
        "CreatedDate": {
            "description": "The date that the intent was created.",
            "type": "string"
        },
        "CreateVersion": {
            "description": "When set to true a new numbered version of the intent is created for each update.",
            "type": "boolean",
            "default": false
        },
        "Description": {
            "description": "A description of the intent.",
            "type": "string",
            "minLength": 1,
            "maxLength": 200
        },
        "DialogCodeHook": {
            "description": "Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction. For example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, GlutenIntolerant, to true. You might find John's phone number and set the corresponding session attribute.",
            "$ref": "#/definitions/CodeHook"
        },
        "FollowUpPrompt": {
            "description": "Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For example, after the `OrderPizza` intent is fulfilled, you might prompt the user to order a drink. The action that Amazon Lex takes depends on the user's response, as follows:\n+ If the user says \"Yes\" it responds with the clarification prompt that is configured for the bot.\n+ if the user says \"Yes\" and continues with an utterance that triggers an intent it starts a conversation for the intent.\n+ If the user says \"No\" it responds with the rejection statement configured for the the follow-up prompt.\n+ If it doesn't recognize the utterance it repeats the follow-up prompt again.\nThe FollowUpPrompt field and the ConclusionStatement field are mutually exclusive. You can specify only one.",
            "$ref": "#/definitions/FollowUpPrompt"
        },
        "FulfillmentActivity": {
            "description": "Required. Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, FulfillmentActivity defines how the bot places an order with a local pizza store. You might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria).",
            "$ref": "#/definitions/FulfillmentActivity"
        },
        "InputContexts": {
            "description": "An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/InputContext"
            },
            "minItems": 0,
            "maxItems": 10
        },
        "KendraConfiguration": {
            "description": "Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. For more information, see AMAZON.KendraSearchIntent.",
            "$ref": "#/definitions/KendraConfiguration"
        },
        "OutputContexts": {
            "description": "An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/OutputContext"
            },
            "minItems": 0,
            "maxItems": 10
        },
        "LastUpdatedDate": {
            "description": "The date that the intent was updated. When you create a resource, the creation date and last update dates are the same.",
            "type": "string"
        },
        "Name": {
            "description": "The name of the intent. The name is not case sensitive. The name can't match a built-in intent name, or a built-in intent name with \"AMAZON.\" removed. For example, because there is a built-in intent called AMAZON.HelpIntent, you can't create a custom intent called HelpIntent. For a list of built-in intents, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.",
            "type": "string",
            "pattern": "^([A-Za-z]_?){1,101}$"
        },
        "ParentIntentSignature": {
            "description": "A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.",
            "type": "string"
        },
        "RejectionStatement": {
            "description": "When the user answers \"no\" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled. You must provide both the rejectionStatement and the confirmationPrompt, or neither.",
            "$ref": "#/definitions/Statement"
        },
        "SampleUtterances": {
            "description": "An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". In each utterance, a slot name is enclosed in curly braces.",
            "type": "array",
            "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 200
            },
            "minItems": 0,
            "maxItems": 1500
        },
        "Slots": {
            "description": "An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see [Amazon Lex: How It Works](https://docs.aws.amazon.com/lex/latest/dg/how-it-works.html).",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Slot"
            },
            "minItems": 0,
            "maxItems": 100
        },
        "Version": {
            "description": "The version of the intent.",
            "type": "string"
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "primaryIdentifier": [
        "/properties/Name",
        "/properties/Version"
    ],
    "readOnlyProperties": [
        "/properties/Version",
        "/properties/Checksum",
        "/properties/CreatedDate",
        "/properties/LastUpdatedDate"
    ],
    "createOnlyProperties": [
        "/properties/Name"
    ],
    "writeOnlyProperties": [
        "/properties/CreateVersion"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "lex:GetIntent",
                "lex:PutIntent"
            ]
        },
        "read": {
            "permissions": [
                "lex:GetIntent"
            ]
        },
        "update": {
            "permissions": [
                "lex:GetIntent",
                "lex:PutIntent"
            ]
        },
        "delete": {
            "permissions": [
                "lex:DeleteIntent"
            ]
        }
    }
}